extend type Mutation {
  # ------------------------------------------------------
  # projects
  # ------------------------------------------------------

  "Create a new project."
  create_project(input: create_project_input!): project_id_payload

  "Delete a project."
  delete_project(input: delete_project_input!): success_payload

  "Update a project's name."
  set_project_name(input: set_project_name_input!): project_id_payload

  "Update a project's description."
  set_project_description(
    input: set_project_description_input!
  ): project_id_payload
}
# ------------------------------------------------------
# project inputs
# ------------------------------------------------------

input create_project_input {
  "The tenant"
  tenant_id: UUID
  "The name of the project to create"
  name: String!
  "An optional description of this project - can be updated later with setProjectDescription"
  description: String
}

input delete_project_input {
  "The ID of the project to delete"
  project_id: UUID!
}

input set_project_name_input {
  "The ID of the project to update"
  project_id: UUID!
  "The new name for this project"
  name: String!
}

input set_project_description_input {
  "The ID of the project to update"
  project_id: UUID!
  "The new description of this project."
  description: String
}

type project_id_payload {
  id: UUID
}

extend type Query {

  "fetch data from the table: \"project\" using primary key columns"
  project_by_pk(id: uuid!): project

}

type project {
  created: timestamptz!
  deleted_at: timestamptz
  description: String
  # flows: ignored
  # flows_aggregate: ignored
  id: uuid!
  name: String!
  # tenant: ignored
  tenant_id: uuid!
  updated: timestamptz!
}
