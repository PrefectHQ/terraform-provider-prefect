# ------------------------------------------------------
# service account
# ------------------------------------------------------

extend type Mutation {
  "Add a new service account."
  create_service_account(input: create_service_account_input!): user_id_payload

  "Update service account role."
  set_membership_role(input: set_membership_role_input!): membership_id_payload

  "Delete a service account and all of their API keys."
  delete_service_account(input: delete_service_account_input!): success_payload

  "Generate a new API key."
  create_api_key(input: create_api_key_input!): create_api_key_payload

  "Delete API key."
  delete_api_key(input: delete_api_key_input!): success_payload
}

input create_service_account_input {
  "Tenant id. Must match current tenant otherwise an Unauthorized error will be returned."
  tenant_id: UUID!

  "Service account name. Populates the first_name field."
  name: String!

  "Role id. Defaults to TENANT_ADMIN if unspecified."
  role_id: UUID
}

type user_id_payload {
  id: UUID
}

input set_membership_role_input {
  membership_id: UUID!
  role: membership_role
  role_id: UUID
}

enum membership_role {
  READ_ONLY_USER
  USER
  TENANT_ADMIN
}

type membership_id_payload {
  id: UUID
}

input delete_service_account_input {
  user_id: UUID!
}

input create_api_key_input {
  user_id: UUID!

  name: String!

  "Null = never expire"
  expires_at: DateTime

  "Defaults to current tenant"
  default_tenant_id: UUID
}

type create_api_key_payload {
  "Key id"
  id: UUID

  "Secret value"
  key: String
}

input delete_api_key_input {
  key_id: UUID!
}

extend type Query {

  "fetch data from the table: \"user_view_same_tenant\""
  user_view_same_tenant(where: user_view_same_tenant_bool_exp): [user_view_same_tenant!]!

  "fetch details about the current user"
  user: [user!]!

  "fetch data from the table: \"auth.role\""
  auth_role: [auth_role!]!

  "fetch data from the table: \"auth.api_key\""
  auth_api_key(where: auth_api_key_bool_exp): [Auth_api_key!]!
}

input user_view_same_tenant_bool_exp {
#  _and: [user_view_same_tenant_bool_exp]
#  _not: user_view_same_tenant_bool_exp
#  _or: [user_view_same_tenant_bool_exp]
#  account_type: account_type_comparison_exp
#  email: String_comparison_exp
#  first_name: String_comparison_exp
  id: uuid_comparison_exp
#  last_name: String_comparison_exp
#  memberships: membership_bool_exp
  username: String_comparison_exp
}

input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

input String_comparison_exp {
  _similar: String
}

type user_view_same_tenant {
  account_type: account_type
  email: String
  first_name: String
  id: uuid
  last_name: String
  memberships(
#    distinct_on: [membership_select_column!]
#    limit: Int
#    offset: Int
#    order_by: [membership_order_by!]
    where: membership_bool_exp
  ): [membership!]!
  username: String
}

scalar account_type

type membership {
  created: timestamptz!
  id: uuid!
  role: String
  role_detail: auth_role
  role_id: uuid
#  security_updated: timestamptz!
  tenant: tenant!
  tenant_id: uuid!
  updated: timestamptz!
#  user: user!
  user_id: uuid!
}

type auth_role {
  created: timestamptz!
  id: uuid!
  name: String!
  permissions(path: String): jsonb!
#  tenant: tenant
  tenant_id: uuid
  updated: timestamptz!
}

input membership_bool_exp {
#  _and: [membership_bool_exp]
#  _not: membership_bool_exp
#  _or: [membership_bool_exp]
#  created: timestamptz_comparison_exp
  id: uuid_comparison_exp
#  role: String_comparison_exp
#  role_detail: auth_role_bool_exp
  role_id: uuid_comparison_exp
#  security_updated: timestamptz_comparison_exp
#  tenant: tenant_bool_exp
  tenant_id: uuid_comparison_exp
#  updated: timestamptz_comparison_exp
#  user: user_bool_exp
  user_id: uuid_comparison_exp
}

type user {
  id: uuid!
  username: String!
  first_name: String
  default_membership: membership
}

type tenant {
  id: uuid!
  name: String!
}

# changed to uppercase so Go exports this for referencing outside the package
type Auth_api_key {
  created: timestamptz!
#  created_by: user
#  created_by_user_id: uuid
  default_tenant_id: uuid
  expires_at: timestamptz
  id: uuid!
  key_hash: String
  name: String!
  updated: timestamptz!
#  user: user!
  user_id: uuid!
}

input auth_api_key_bool_exp {
#  _and: [auth_api_key_bool_exp]
#  _not: auth_api_key_bool_exp
#  _or: [auth_api_key_bool_exp]
#  created: timestamptz_comparison_exp
#  created_by: user_bool_exp
#  created_by_user_id: uuid_comparison_exp
#  default_tenant_id: uuid_comparison_exp
#  expires_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
#  key_hash: String_comparison_exp
#  name: String_comparison_exp
#  updated: timestamptz_comparison_exp
#  user: user_bool_exp
  user_id: uuid_comparison_exp
}
